#!/usr/bin/env python3

import argparse
import json
import logging
import os
import os.path
import re
import shutil
import sys

log = logging.getLogger('quibble.cmd')
known_stages = [
    'all',
    'phpunit-unit',
    'phpunit',
    'phpunit-standalone',
    'npm-test',
    'composer-test',
    'qunit',
    'selenium',
    'api-testing',
    # Non exist in Quibble
    'phan',
    'phpunit-custom',
]
default_stages = [
    'phpunit-unit',
    'phpunit',
    'phpunit-standalone',
    'npm-test',
    'composer-test',
    'qunit',
    'selenium',
    'api-testing',
]


# Used for add_argument(choices=) let us validate multiple choices at once.
# >>> 'a' in MultipleChoices(['a', 'b', 'c'])
# True
# >>> ['a', 'b'] in MultipleChoices(['a', 'b', 'c'])
# True
class MultipleChoices(list):
    def __contains__(self, item):
        return set(item).issubset(set(self))


def _parse_arguments(args):
    return get_arg_parser().parse_args(args)


def get_arg_parser():
    """
    Parse arguments
    """
    prog = 'simbble'
    parser = argparse.ArgumentParser(
        description='Simbble: A simple script to run Quibble the Mediawiki test runner',
        epilog='\n  '.join([
            'examples:',
            f'ZUUL_PROJECT=DiscordNotifications {prog}',
            f'ZUUL_PROJECT=DiscordNotifications {prog} --run phan',
            f'DEPENDENCIES=Flow ZUUL_PROJECT=DiscordNotifications {prog} --run phan',
            f'DEPENDENCIES=Flow ZUUL_PROJECT=DiscordNotifications {prog}',
        ]),
        formatter_class=argparse.RawTextHelpFormatter,
        prog=prog
    )

    parser.add_argument(
        'projects',
        default=[],
        nargs='*',
        help='MediaWiki extensions and skins to clone. Always clone '
        'mediawiki/core and mediawiki/skins/Vector. '
        'If $ZUUL_PROJECT is set, it will be cloned as well.',
    )

    def comma_separated_list(string):
        return string.split(',')
    stages_choices = MultipleChoices(known_stages)

    parser.add_argument(
        '--run',
        default=['phan'],
        type=comma_separated_list,
        choices=stages_choices,
        metavar='STAGE[,STAGE ...]',
        help='Tests to run. Comma separated. (default: phan).',
    )

    return parser

def resolve_dependencies():
    deps = os.getenv('DEPENDENCIES')
    if not deps:
        return []
    deps = deps.split(',')

    if not os.path.exists("parameter_functions.py"):
        print('Download parameter_functions.py...')
        os.system('curl -sLO https://raw.githubusercontent.com/wikimedia/integration-config/master/zuul/parameter_functions.py')

    import parameter_functions

    # https://github.com/femiwiki/.github/issues/4
    if os.getenv('MEDIAWIKI_VERSION') == 'REL1_35':
        parameter_functions.dependencies['EventLogging'].remove('EventBus')

    # Add dependencies of target extension
    print(f'The direct dependencies are {deps}')
    parameter_functions.dependencies['ext'] = deps


    # Resolve
    resolvedDependencies = []
    for d in parameter_functions.get_dependencies('ext', parameter_functions.dependencies):
        d = 'mediawiki/extensions/' + d
        d = d.replace('/extensions/skins/', '/skins/')
        resolvedDependencies.append(d)
    if 'EventLogging' in resolvedDependencies:
        resolvedDependencies.remove('EventLogging')

    return resolvedDependencies


def purge_installation_file(path):
    if os.path.exists(path):
        print(f'Purging {path}')
        os.system(f'sudo rm -rf {path}')


def purge_directory(path):
    if os.path.exists(path):
        print(f'Purging {path}')
        os.system(f'sudo rm -rf {path}')
    else:
        print(f'is empty: {path}')

def read_name(path_to_extension):
    data = open(path_to_extension, 'r').read()
    return json.loads(data)["name"]


def main():
    os.system('sudo -v')

    logging.basicConfig(level=logging.INFO)
    logging.getLogger('simbble').setLevel(logging.DEBUG)

    args = _parse_arguments(sys.argv[1:])
    args.run = ''.join(args.run)
    zuul_project = os.getenv('ZUUL_PROJECT', os.getenv('THING_SUBNAME'))
    if not zuul_project:
        print('no ZUUL_PROJECT specified')
        exit(1)

    femiwiki_extensions = [
        'AchievementBadges',
        'DiscordNotifications',
        'FacetedCategory',
        'Femiwiki',
        'Sanctions',
        'UnifiedExtensionForFemiwiki',
    ]

    base_path = "/home/nemo/git/femiwiki" if zuul_project in femiwiki_extensions else "/home/nemo/git/wikimedia"

    mediawiki_version = os.popen(f'git --git-dir "{base_path}/{zuul_project}"/.git branch --show-current').read().strip()
    match = re.compile('^(REL\d+_\d+)(?:-.+)?$').match(mediawiki_version)
    if mediawiki_version == 'main':
        mediawiki_version = 'master'
    elif match:
        mediawiki_version = match.group(1)
    else:
        mediawiki_version = 'master'
    print(f'Use {mediawiki_version} branch')

    purge_installation_file(f'mw/{mediawiki_version}/LocalSettings.php')
    purge_installation_file(f'mw/{mediawiki_version}/composer.local.json')

    if not os.path.exists(f'mw/{mediawiki_version}'):
        print(f'Trying to download MediaWiki {mediawiki_version}...')
        os.system(' '.join([
            'git clone',
            f'-b {mediawiki_version}',
            '--depth 1',
            '--recurse-submodules' if mediawiki_version != 'master' else '',
            f'https://gerrit.wikimedia.org/r/mediawiki/core mw/{mediawiki_version}',
        ]))

    type = 'extension' if os.path.exists(f'{base_path}/{zuul_project}/extension.json') else 'skin'
    name = read_name(f'{base_path}/{zuul_project}/{type}.json')
    print(f'The type of the target {name} is {type}')

    purge_directory(f'mw/{mediawiki_version}/{type}s/{name}')
    cmd = f'sudo cp -R {base_path}/{zuul_project} mw/{mediawiki_version}/{type}s'
    print(f'Running {cmd}')
    os.system(cmd)

    deps = resolve_dependencies()

    for ext in os.listdir(f'mw/{mediawiki_version}/extensions/'):
        os.system(f'mkdir -p mw-needless/{mediawiki_version}/extensions')
        if ext != zuul_project and ext not in deps:
            os.system(f'sudo rm -rf mw-needless/{mediawiki_version}/extensions/{ext}')
            os.system(f'sudo mv mw/{mediawiki_version}/extensions/{ext} mw-needless/{mediawiki_version}/extensions/')

    for dep in deps:
        name = dep.split('/')[-1]
        if not os.path.exists(f'mw/{mediawiki_version}/extensions/{name}'):
            if os.path.exists(f'mw-needless/{mediawiki_version}/extensions/{name}'):
                os.system(f'sudo mv mw-needless/{mediawiki_version}/extensions/{name} mw/{mediawiki_version}/extensions/')
            else:
                cmd = ' '.join([
                    'sudo git clone',
                    f'-b {mediawiki_version}',
                    '--depth 1',
                    '--recurse-submodules',
                    f'https://gerrit.wikimedia.org/r/{dep}',
                    f'mw/{mediawiki_version}/extensions/{name}',
                ])
                print(cmd)
                os.system(cmd)

    os.system(f'chmod 777 mw/{mediawiki_version} cache')
    os.system(f'sudo chown -R nobody:nogroup mw/{mediawiki_version} cache')
    os.system(f'sudo chown "$(id -u)":"$(id -g)" mw/{mediawiki_version} cache')

    volumes = {}

    opt_args = [
        '--rm',
    ]

    pos_args = [
        # '-c "php tests/phpunit/phpunit.php --group Flow"',
    ]

    msg = 'run'
    image = ''
    if args.run != 'phan':
        if os.path.exists(f'mw/{mediawiki_version}/composer.lock'):
            msg = msg + ' without pre-installed dependencies'
            pos_args.append('--skip-deps')
        else:
            msg = msg + ' with pre-installed dependencies'
            pos_args.append('--packages-source composer')

    if args.run == 'phan':
        msg = msg + ' Phan'
        volumes[f'mw/{mediawiki_version}']  = 'mediawiki'
        image = 'docker-registry.wikimedia.org/releng/mediawiki-phan-php73:latest'
        opt_args = opt_args + [
            f'-e THING_SUBNAME={type}s/{zuul_project}',
        ]
        pos_args.append('--color')
    elif args.run == 'cover':
        image='docker-registry.wikimedia.org/releng/quibble-coverage:latest'
        opt_args.append(f'-e ZUUL_PROJECT=mediawiki/{type}s/{zuul_project}')
        pos_args.append(f'--skip-zuul')
        pos_args.append(f'-c mwext-phpunit-coverage')
    else:
        msg = msg + ' Quibble'
        volumes['cache']  = 'cache'
        volumes[f'mw/{mediawiki_version}']  = 'workspace/src'
        image = 'docker-registry.wikimedia.org/releng/quibble-stretch-php73:latest'
        opt_args.append(f'-e ZUUL_PROJECT=mediawiki/{type}s/{zuul_project}')
        pos_args.append(" ".join(deps))
        pos_args.append(f'--skip-zuul')
        if args.run == 'phpunit-custom':
            # pos_args.append('-c "' + ' '.join([
            #     "php tests/phpunit/phpunit.php",
            #     "--testsuite extensions",
            #     "--exclude-group Broken,ParserFuzz,Stub,Database,Standalone",
            #     "--log-junit /workspace/log/junit-dbless.xml",
            # ]) + '"')
            pos_args.append('-c "' + ' '.join([
                "php tests/phpunit/phpunit.php",
                "--testsuite extensions",
                "--group AbuseFilterConsequences",
                "--stop-on-failure",
            ]) + '"')
        else:
            pos_args.append(f'--run {args.run}')

    print(msg)
    cmd = ' '.join([
        'docker run',
        ' '.join(opt_args + [f'-v $(pwd)/{k}:/{volumes[k]}' for k in volumes]),
        image,
        ' '.join(pos_args)
    ])
    print(f'Running `{cmd}`')
    os.system(cmd)

    os.system(f'sudo rm -rf /{mediawiki_version}/{type}s/{name}')


if __name__ == '__main__':
    main()
